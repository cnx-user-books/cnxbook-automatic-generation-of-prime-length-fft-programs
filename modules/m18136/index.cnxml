<document xmlns="http://cnx.rice.edu/cnxml" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:md="http://cnx.rice.edu/mdml" xmlns:bib="http://bibtexml.sf.net/">
  <title>Programs for Circular Convolution</title>
  <metadata>
  <md:content-id>m18136</md:content-id><md:title>Programs for Circular Convolution</md:title>
  <md:abstract/>
  <md:uuid>d07b7c19-8506-40d9-9f1f-7226d78bbc02</md:uuid>
</metadata>

<content>
    <section id="cid1">
      <title>Programs for Circular Convolution</title>
      <para id="id2253722">To write a program that computes the circular convolution of <m:math><m:mi>h</m:mi></m:math> and <m:math><m:mi>x</m:mi></m:math>
using the bilinear form <link document="m18133" target-id="uid13">Equation 24 in Bilinear Forms for Circular Convolution</link>
we need subprograms that carry out the action of <m:math><m:mi>P</m:mi></m:math>, <m:math><m:msup><m:mi>P</m:mi><m:mi>t</m:mi></m:msup></m:math>,
<m:math><m:mi>R</m:mi></m:math>, <m:math><m:msup><m:mi>R</m:mi><m:mi>t</m:mi></m:msup></m:math>, <m:math><m:mi>A</m:mi></m:math> and <m:math><m:msup><m:mi>B</m:mi><m:mi>t</m:mi></m:msup></m:math>.
We are assuming, as is usually done, that <m:math><m:mi>h</m:mi></m:math> is fixed and known
so that <m:math><m:mrow><m:mi>u</m:mi><m:mo>=</m:mo><m:msup><m:mi>C</m:mi><m:mi>t</m:mi></m:msup><m:msup><m:mi>R</m:mi><m:mrow><m:mo>-</m:mo><m:mi>t</m:mi></m:mrow></m:msup><m:mi>P</m:mi><m:mi>J</m:mi><m:mi>h</m:mi></m:mrow></m:math> can be pre-computed and stored.
To compute these multiplicative constants <m:math><m:mi>u</m:mi></m:math> we need additional
subprograms to carry out the action of <m:math><m:msup><m:mi>C</m:mi><m:mi>t</m:mi></m:msup></m:math> and <m:math><m:msup><m:mi>R</m:mi><m:mrow><m:mo>-</m:mo><m:mi>t</m:mi></m:mrow></m:msup></m:math>
but the efficiency with which we compute <m:math><m:mi>u</m:mi></m:math>
is unimportant since this is done beforehand and
<m:math><m:mi>u</m:mi></m:math> is stored.</para>
      <para id="id2254164">In <link document="m18132" target-id="cid2">Prime Factor Permutations</link> we discussed the permutation <m:math><m:mi>P</m:mi></m:math>
and a program for it <code>pfp()</code>
 appears in the appendix.
The reduction operations <m:math><m:mi>R</m:mi></m:math>, <m:math><m:msup><m:mi>R</m:mi><m:mi>t</m:mi></m:msup></m:math> and <m:math><m:msup><m:mi>R</m:mi><m:mrow><m:mo>-</m:mo><m:mi>t</m:mi></m:mrow></m:msup></m:math>
we have described in <link document="m18132" target-id="cid3">Reduction Operations</link> and
programs for these reduction operations
<code>KRED()</code>
 etc, also appear in the appendix.
To carry out the operation of <m:math><m:mi>A</m:mi></m:math> and <m:math><m:msup><m:mi>B</m:mi><m:mi>t</m:mi></m:msup></m:math>
we need to be able to carry out the action of
<m:math><m:mrow><m:msub><m:mi>A</m:mi><m:msub><m:mi>d</m:mi><m:mn>1</m:mn></m:msub></m:msub><m:mo>⊗</m:mo><m:mo>⋯</m:mo><m:mo>⊗</m:mo><m:msub><m:mi>A</m:mi><m:msub><m:mi>d</m:mi><m:mi>k</m:mi></m:msub></m:msub></m:mrow></m:math>
and this was discussed in <link document="m18135">Implementing Kronecker Products Efficiently</link>.
Note that since <m:math><m:mi>A</m:mi></m:math> and <m:math><m:msup><m:mi>B</m:mi><m:mi>t</m:mi></m:msup></m:math> are block diagonal, each diagonal block
can be done separately.
However, since they are rectangular, it is necessary
to be careful so that the correct indexing is used.</para>
      <para id="id2254326">To facilitate the discussion of the programs we generate,
it is useful to consider an example.
Take as an example the 45 point circular convolution
algorithm listed in the appendix.
From <link document="m18133" target-id="uid10">Equation 19 from Bilinear Forms for Circular Convolution</link> we find that we need to compute
<m:math><m:mrow><m:mi>x</m:mi><m:mo>=</m:mo><m:msub><m:mi>P</m:mi><m:mrow><m:mn>9</m:mn><m:mo>,</m:mo><m:mn>5</m:mn></m:mrow></m:msub><m:mi>x</m:mi></m:mrow></m:math> and <m:math><m:mrow><m:mi>x</m:mi><m:mo>=</m:mo><m:msub><m:mi>R</m:mi><m:mrow><m:mn>9</m:mn><m:mo>,</m:mo><m:mn>5</m:mn></m:mrow></m:msub><m:mi>x</m:mi></m:mrow></m:math>.
These are the first two commands in the program.</para>
      <para id="id2254390">We noted above that bilinear forms for linear convolution, <m:math><m:mrow><m:mo>(</m:mo><m:msub><m:mi>D</m:mi><m:mi>d</m:mi></m:msub><m:mo>,</m:mo><m:msub><m:mi>E</m:mi><m:mi>d</m:mi></m:msub><m:mo>,</m:mo><m:msub><m:mi>F</m:mi><m:mi>d</m:mi></m:msub><m:mo>)</m:mo></m:mrow></m:math>,
can be used for these cyclotomic convolutions.
Specifically we can take <m:math><m:mrow><m:msub><m:mi>A</m:mi><m:msup><m:mi>p</m:mi><m:mi>i</m:mi></m:msup></m:msub><m:mo>=</m:mo><m:msub><m:mi>D</m:mi><m:mrow><m:mi>φ</m:mi><m:mo>(</m:mo><m:msup><m:mi>p</m:mi><m:mi>i</m:mi></m:msup><m:mo>)</m:mo></m:mrow></m:msub></m:mrow></m:math>,
<m:math><m:mrow><m:msub><m:mi>B</m:mi><m:msup><m:mi>p</m:mi><m:mi>i</m:mi></m:msup></m:msub><m:mo>=</m:mo><m:msub><m:mi>E</m:mi><m:mrow><m:mi>φ</m:mi><m:mo>(</m:mo><m:msup><m:mi>p</m:mi><m:mi>i</m:mi></m:msup><m:mo>)</m:mo></m:mrow></m:msub></m:mrow></m:math> and <m:math><m:mrow><m:msub><m:mi>C</m:mi><m:msup><m:mi>p</m:mi><m:mi>i</m:mi></m:msup></m:msub><m:mo>=</m:mo><m:msub><m:mi>G</m:mi><m:msup><m:mi>p</m:mi><m:mi>i</m:mi></m:msup></m:msub><m:msub><m:mi>F</m:mi><m:mrow><m:mi>φ</m:mi><m:mo>(</m:mo><m:msup><m:mi>p</m:mi><m:mi>i</m:mi></m:msup><m:mo>)</m:mo></m:mrow></m:msub></m:mrow></m:math>.
In this case <link document="m18133" target-id="uid11">Equation 20 in Bilinear Forms for Circular Convolution</link> becomes</para>
      <equation id="id2254580">
        <m:math mode="display">
          <m:mrow>
            <m:mi>A</m:mi>
            <m:mo>=</m:mo>
            <m:mn>1</m:mn>
            <m:mo>⊕</m:mo>
            <m:msub>
              <m:mi>D</m:mi>
              <m:mn>2</m:mn>
            </m:msub>
            <m:mo>⊕</m:mo>
            <m:msub>
              <m:mi>D</m:mi>
              <m:mn>6</m:mn>
            </m:msub>
            <m:mo>⊕</m:mo>
            <m:msub>
              <m:mi>D</m:mi>
              <m:mn>4</m:mn>
            </m:msub>
            <m:mo>⊕</m:mo>
            <m:mrow>
              <m:mo>(</m:mo>
              <m:msub>
                <m:mi>D</m:mi>
                <m:mn>2</m:mn>
              </m:msub>
              <m:mo>⊗</m:mo>
              <m:msub>
                <m:mi>D</m:mi>
                <m:mn>4</m:mn>
              </m:msub>
              <m:mo>)</m:mo>
            </m:mrow>
            <m:mo>⊕</m:mo>
            <m:mrow>
              <m:mo>(</m:mo>
              <m:msub>
                <m:mi>D</m:mi>
                <m:mn>6</m:mn>
              </m:msub>
              <m:mo>⊗</m:mo>
              <m:msub>
                <m:mi>D</m:mi>
                <m:mn>4</m:mn>
              </m:msub>
              <m:mo>)</m:mo>
            </m:mrow>
            <m:mo>.</m:mo>
          </m:mrow>
        </m:math>
      </equation>
      <para id="id2254677">In our approach this is what we have done.
When we use the bilinear forms for convolution given
in the appendix, for which <m:math><m:mrow><m:msub><m:mi>D</m:mi><m:mn>4</m:mn></m:msub><m:mo>=</m:mo><m:msub><m:mi>D</m:mi><m:mn>2</m:mn></m:msub><m:mo>⊗</m:mo><m:msub><m:mi>D</m:mi><m:mn>2</m:mn></m:msub></m:mrow></m:math> and
<m:math><m:mrow><m:msub><m:mi>D</m:mi><m:mn>6</m:mn></m:msub><m:mo>=</m:mo><m:msub><m:mi>D</m:mi><m:mn>2</m:mn></m:msub><m:mo>⊗</m:mo><m:msub><m:mi>D</m:mi><m:mn>3</m:mn></m:msub></m:mrow></m:math>, we get</para>
      <equation id="id2254753">
        <m:math mode="display">
          <m:mrow>
            <m:mi>A</m:mi>
            <m:mo>=</m:mo>
            <m:mn>1</m:mn>
            <m:mo>⊕</m:mo>
            <m:msub>
              <m:mi>D</m:mi>
              <m:mn>2</m:mn>
            </m:msub>
            <m:mo>⊕</m:mo>
            <m:mrow>
              <m:mo>(</m:mo>
              <m:msub>
                <m:mi>D</m:mi>
                <m:mn>2</m:mn>
              </m:msub>
              <m:mo>⊗</m:mo>
              <m:msub>
                <m:mi>D</m:mi>
                <m:mn>3</m:mn>
              </m:msub>
              <m:mo>)</m:mo>
            </m:mrow>
            <m:mo>⊕</m:mo>
            <m:mrow>
              <m:mo>(</m:mo>
              <m:msub>
                <m:mi>D</m:mi>
                <m:mn>2</m:mn>
              </m:msub>
              <m:mo>⊗</m:mo>
              <m:msub>
                <m:mi>D</m:mi>
                <m:mn>2</m:mn>
              </m:msub>
              <m:mo>)</m:mo>
            </m:mrow>
            <m:mo>⊕</m:mo>
            <m:mrow>
              <m:mo>(</m:mo>
              <m:msub>
                <m:mi>D</m:mi>
                <m:mn>2</m:mn>
              </m:msub>
              <m:mo>⊗</m:mo>
              <m:msub>
                <m:mi>D</m:mi>
                <m:mn>2</m:mn>
              </m:msub>
              <m:mo>⊗</m:mo>
              <m:msub>
                <m:mi>D</m:mi>
                <m:mn>2</m:mn>
              </m:msub>
              <m:mo>)</m:mo>
            </m:mrow>
            <m:mo>⊕</m:mo>
            <m:mrow>
              <m:mo>(</m:mo>
              <m:msub>
                <m:mi>D</m:mi>
                <m:mn>2</m:mn>
              </m:msub>
              <m:mo>⊗</m:mo>
              <m:msub>
                <m:mi>D</m:mi>
                <m:mn>3</m:mn>
              </m:msub>
              <m:mo>⊗</m:mo>
              <m:msub>
                <m:mi>D</m:mi>
                <m:mn>2</m:mn>
              </m:msub>
              <m:mo>⊗</m:mo>
              <m:msub>
                <m:mi>D</m:mi>
                <m:mn>2</m:mn>
              </m:msub>
              <m:mo>)</m:mo>
            </m:mrow>
          </m:mrow>
        </m:math>
      </equation>
      <para id="id2254905">and since <m:math><m:mrow><m:msub><m:mi>E</m:mi><m:mi>d</m:mi></m:msub><m:mo>=</m:mo><m:msub><m:mi>D</m:mi><m:mi>d</m:mi></m:msub></m:mrow></m:math> for the linear convolution algorithms
listed in the appendix,
we get</para>
      <equation id="id2254936">
        <m:math mode="display">
          <m:mrow>
            <m:mi>B</m:mi>
            <m:mo>=</m:mo>
            <m:mn>1</m:mn>
            <m:mo>⊕</m:mo>
            <m:msubsup>
              <m:mi>D</m:mi>
              <m:mn>2</m:mn>
              <m:mi>t</m:mi>
            </m:msubsup>
            <m:mo>⊕</m:mo>
            <m:mrow>
              <m:mo>(</m:mo>
              <m:msubsup>
                <m:mi>D</m:mi>
                <m:mn>2</m:mn>
                <m:mi>t</m:mi>
              </m:msubsup>
              <m:mo>⊗</m:mo>
              <m:msubsup>
                <m:mi>D</m:mi>
                <m:mn>3</m:mn>
                <m:mi>t</m:mi>
              </m:msubsup>
              <m:mo>)</m:mo>
            </m:mrow>
            <m:mo>⊕</m:mo>
            <m:mrow>
              <m:mo>(</m:mo>
              <m:msubsup>
                <m:mi>D</m:mi>
                <m:mn>2</m:mn>
                <m:mi>t</m:mi>
              </m:msubsup>
              <m:mo>⊗</m:mo>
              <m:msubsup>
                <m:mi>D</m:mi>
                <m:mn>2</m:mn>
                <m:mi>t</m:mi>
              </m:msubsup>
              <m:mo>)</m:mo>
            </m:mrow>
            <m:mo>⊕</m:mo>
            <m:mrow>
              <m:mo>(</m:mo>
              <m:msubsup>
                <m:mi>D</m:mi>
                <m:mn>2</m:mn>
                <m:mi>t</m:mi>
              </m:msubsup>
              <m:mo>⊗</m:mo>
              <m:msubsup>
                <m:mi>D</m:mi>
                <m:mn>2</m:mn>
                <m:mi>t</m:mi>
              </m:msubsup>
              <m:mo>⊗</m:mo>
              <m:msubsup>
                <m:mi>D</m:mi>
                <m:mn>2</m:mn>
                <m:mi>t</m:mi>
              </m:msubsup>
              <m:mo>)</m:mo>
            </m:mrow>
            <m:mo>⊕</m:mo>
            <m:mrow>
              <m:mo>(</m:mo>
              <m:msubsup>
                <m:mi>D</m:mi>
                <m:mn>2</m:mn>
                <m:mi>t</m:mi>
              </m:msubsup>
              <m:mo>⊗</m:mo>
              <m:msubsup>
                <m:mi>D</m:mi>
                <m:mn>3</m:mn>
                <m:mi>t</m:mi>
              </m:msubsup>
              <m:mo>⊗</m:mo>
              <m:msubsup>
                <m:mi>D</m:mi>
                <m:mn>2</m:mn>
                <m:mi>t</m:mi>
              </m:msubsup>
              <m:mo>⊗</m:mo>
              <m:msubsup>
                <m:mi>D</m:mi>
                <m:mn>2</m:mn>
                <m:mi>t</m:mi>
              </m:msubsup>
              <m:mo>)</m:mo>
            </m:mrow>
            <m:mo>.</m:mo>
          </m:mrow>
        </m:math>
      </equation>
      <para id="id2255129">From the discussion above, we found that the Kronecker products
like <m:math><m:mrow><m:msub><m:mi>D</m:mi><m:mn>2</m:mn></m:msub><m:mo>⊗</m:mo><m:msub><m:mi>D</m:mi><m:mn>2</m:mn></m:msub><m:mo>⊗</m:mo><m:msub><m:mi>D</m:mi><m:mn>2</m:mn></m:msub></m:mrow></m:math>
appearing in these expressions are best carried
out by factoring the product in to factors
of the form <m:math><m:mrow><m:msub><m:mi>I</m:mi><m:mi>a</m:mi></m:msub><m:mo>⊗</m:mo><m:msub><m:mi>D</m:mi><m:mn>2</m:mn></m:msub><m:mo>⊗</m:mo><m:msub><m:mi>I</m:mi><m:mi>b</m:mi></m:msub></m:mrow></m:math>.
Therefore we need a program to carry out
<m:math><m:mrow><m:mo>(</m:mo><m:msub><m:mi>I</m:mi><m:mi>a</m:mi></m:msub><m:mo>⊗</m:mo><m:msub><m:mi>D</m:mi><m:mn>2</m:mn></m:msub><m:mo>⊗</m:mo><m:msub><m:mi>I</m:mi><m:mi>b</m:mi></m:msub><m:mo>)</m:mo><m:mi>x</m:mi></m:mrow></m:math> and
<m:math><m:mrow><m:mo>(</m:mo><m:msub><m:mi>I</m:mi><m:mi>a</m:mi></m:msub><m:mo>⊗</m:mo><m:msub><m:mi>D</m:mi><m:mn>3</m:mn></m:msub><m:mo>⊗</m:mo><m:msub><m:mi>I</m:mi><m:mi>b</m:mi></m:msub><m:mo>)</m:mo><m:mi>x</m:mi></m:mrow></m:math>.
These function are called <code>ID2I(a,b,x)</code>
 and
<code>ID3I(a,b,x)</code>
 and are listed in the appendix.
The transposed form, <m:math><m:mrow><m:mo>(</m:mo><m:msub><m:mi>I</m:mi><m:mi>a</m:mi></m:msub><m:mo>⊗</m:mo><m:msubsup><m:mi>D</m:mi><m:mn>2</m:mn><m:mi>t</m:mi></m:msubsup><m:mo>⊗</m:mo><m:msub><m:mi>I</m:mi><m:mi>b</m:mi></m:msub><m:mo>)</m:mo><m:mi>x</m:mi></m:mrow></m:math>,
is called <code>ID2tI(a,b,x)</code>
.</para>
      <para id="id2255350">To compute the multiplicative constants we need <m:math><m:msup><m:mi>C</m:mi><m:mi>t</m:mi></m:msup></m:math>.
Using <m:math><m:mrow><m:msub><m:mi>C</m:mi><m:msup><m:mi>p</m:mi><m:mi>i</m:mi></m:msup></m:msub><m:mo>=</m:mo><m:msub><m:mi>G</m:mi><m:msup><m:mi>p</m:mi><m:mi>i</m:mi></m:msup></m:msub><m:msub><m:mi>F</m:mi><m:mrow><m:mi>φ</m:mi><m:mo>(</m:mo><m:msup><m:mi>p</m:mi><m:mi>i</m:mi></m:msup><m:mo>)</m:mo></m:mrow></m:msub></m:mrow></m:math>
we get</para>
      <equation id="id2255423">
        <m:math mode="display">
          <m:mtable displaystyle="true">
            <m:mtr>
              <m:mtd columnalign="right">
                <m:msup>
                  <m:mi>C</m:mi>
                  <m:mi>t</m:mi>
                </m:msup>
              </m:mtd>
              <m:mtd>
                <m:mo>=</m:mo>
              </m:mtd>
              <m:mtd columnalign="left">
                <m:mrow>
                  <m:mn>1</m:mn>
                  <m:mo>⊕</m:mo>
                  <m:msubsup>
                    <m:mi>F</m:mi>
                    <m:mn>2</m:mn>
                    <m:mi>t</m:mi>
                  </m:msubsup>
                  <m:msubsup>
                    <m:mi>G</m:mi>
                    <m:mn>3</m:mn>
                    <m:mi>t</m:mi>
                  </m:msubsup>
                  <m:mo>⊕</m:mo>
                  <m:msubsup>
                    <m:mi>F</m:mi>
                    <m:mn>6</m:mn>
                    <m:mi>t</m:mi>
                  </m:msubsup>
                  <m:msubsup>
                    <m:mi>G</m:mi>
                    <m:mn>9</m:mn>
                    <m:mi>t</m:mi>
                  </m:msubsup>
                  <m:mo>⊕</m:mo>
                  <m:msubsup>
                    <m:mi>F</m:mi>
                    <m:mn>4</m:mn>
                    <m:mi>t</m:mi>
                  </m:msubsup>
                  <m:msubsup>
                    <m:mi>G</m:mi>
                    <m:mn>5</m:mn>
                    <m:mi>t</m:mi>
                  </m:msubsup>
                  <m:mo>⊕</m:mo>
                  <m:mrow>
                    <m:mo>(</m:mo>
                    <m:msubsup>
                      <m:mi>F</m:mi>
                      <m:mn>2</m:mn>
                      <m:mi>t</m:mi>
                    </m:msubsup>
                    <m:msubsup>
                      <m:mi>G</m:mi>
                      <m:mn>3</m:mn>
                      <m:mi>t</m:mi>
                    </m:msubsup>
                    <m:mo>⊗</m:mo>
                    <m:msubsup>
                      <m:mi>F</m:mi>
                      <m:mn>4</m:mn>
                      <m:mi>t</m:mi>
                    </m:msubsup>
                    <m:msubsup>
                      <m:mi>G</m:mi>
                      <m:mn>5</m:mn>
                      <m:mi>t</m:mi>
                    </m:msubsup>
                    <m:mo>)</m:mo>
                  </m:mrow>
                  <m:mo>⊕</m:mo>
                  <m:mrow>
                    <m:mo>(</m:mo>
                    <m:msubsup>
                      <m:mi>F</m:mi>
                      <m:mn>6</m:mn>
                      <m:mi>t</m:mi>
                    </m:msubsup>
                    <m:msubsup>
                      <m:mi>G</m:mi>
                      <m:mn>9</m:mn>
                      <m:mi>t</m:mi>
                    </m:msubsup>
                    <m:mo>⊗</m:mo>
                    <m:msubsup>
                      <m:mi>F</m:mi>
                      <m:mn>4</m:mn>
                      <m:mi>t</m:mi>
                    </m:msubsup>
                    <m:msubsup>
                      <m:mi>G</m:mi>
                      <m:mn>5</m:mn>
                      <m:mi>t</m:mi>
                    </m:msubsup>
                    <m:mo>)</m:mo>
                  </m:mrow>
                </m:mrow>
              </m:mtd>
            </m:mtr>
            <m:mtr>
              <m:mtd/>
              <m:mtd>
                <m:mo>=</m:mo>
              </m:mtd>
              <m:mtd columnalign="left">
                <m:mrow>
                  <m:mn>1</m:mn>
                  <m:mo>⊕</m:mo>
                  <m:msubsup>
                    <m:mi>F</m:mi>
                    <m:mn>2</m:mn>
                    <m:mi>t</m:mi>
                  </m:msubsup>
                  <m:msubsup>
                    <m:mi>G</m:mi>
                    <m:mn>3</m:mn>
                    <m:mi>t</m:mi>
                  </m:msubsup>
                  <m:mo>⊕</m:mo>
                  <m:msubsup>
                    <m:mi>F</m:mi>
                    <m:mn>6</m:mn>
                    <m:mi>t</m:mi>
                  </m:msubsup>
                  <m:msubsup>
                    <m:mi>G</m:mi>
                    <m:mn>9</m:mn>
                    <m:mi>t</m:mi>
                  </m:msubsup>
                  <m:mo>⊕</m:mo>
                  <m:msubsup>
                    <m:mi>F</m:mi>
                    <m:mn>4</m:mn>
                    <m:mi>t</m:mi>
                  </m:msubsup>
                  <m:msubsup>
                    <m:mi>G</m:mi>
                    <m:mn>5</m:mn>
                    <m:mi>t</m:mi>
                  </m:msubsup>
                  <m:mo>⊕</m:mo>
                  <m:mrow>
                    <m:mo>(</m:mo>
                    <m:msubsup>
                      <m:mi>F</m:mi>
                      <m:mn>2</m:mn>
                      <m:mi>t</m:mi>
                    </m:msubsup>
                    <m:mo>⊗</m:mo>
                    <m:msubsup>
                      <m:mi>F</m:mi>
                      <m:mn>4</m:mn>
                      <m:mi>t</m:mi>
                    </m:msubsup>
                    <m:mo>)</m:mo>
                  </m:mrow>
                  <m:mrow>
                    <m:mo>(</m:mo>
                    <m:msubsup>
                      <m:mi>G</m:mi>
                      <m:mn>3</m:mn>
                      <m:mi>t</m:mi>
                    </m:msubsup>
                    <m:mo>⊗</m:mo>
                    <m:msubsup>
                      <m:mi>G</m:mi>
                      <m:mn>5</m:mn>
                      <m:mi>t</m:mi>
                    </m:msubsup>
                    <m:mo>)</m:mo>
                  </m:mrow>
                  <m:mo>⊕</m:mo>
                  <m:mrow>
                    <m:mo>(</m:mo>
                    <m:msubsup>
                      <m:mi>F</m:mi>
                      <m:mn>6</m:mn>
                      <m:mi>t</m:mi>
                    </m:msubsup>
                    <m:mo>⊗</m:mo>
                    <m:msubsup>
                      <m:mi>F</m:mi>
                      <m:mn>4</m:mn>
                      <m:mi>t</m:mi>
                    </m:msubsup>
                    <m:mo>)</m:mo>
                  </m:mrow>
                  <m:mrow>
                    <m:mo>(</m:mo>
                    <m:msubsup>
                      <m:mi>G</m:mi>
                      <m:mn>9</m:mn>
                      <m:mi>t</m:mi>
                    </m:msubsup>
                    <m:mo>⊗</m:mo>
                    <m:msubsup>
                      <m:mi>G</m:mi>
                      <m:mn>5</m:mn>
                      <m:mi>t</m:mi>
                    </m:msubsup>
                    <m:mo>)</m:mo>
                  </m:mrow>
                  <m:mo>.</m:mo>
                </m:mrow>
              </m:mtd>
            </m:mtr>
          </m:mtable>
        </m:math>
      </equation>
      <para id="id2255836">The Matlab function <code>KFt</code>
 carries out
the operation <m:math><m:mrow><m:msub><m:mi>F</m:mi><m:msub><m:mi>d</m:mi><m:mn>1</m:mn></m:msub></m:msub><m:mo>⊗</m:mo><m:mo>⋯</m:mo><m:msub><m:mi>F</m:mi><m:msub><m:mi>d</m:mi><m:mi>K</m:mi></m:msub></m:msub></m:mrow></m:math>.
The Matlab function <code>Kcrot</code>
 implements the
operation <m:math><m:mrow><m:msub><m:mi>G</m:mi><m:msubsup><m:mi>p</m:mi><m:mn>1</m:mn><m:msub><m:mi>e</m:mi><m:mn>1</m:mn></m:msub></m:msubsup></m:msub><m:mo>⊗</m:mo><m:mo>⋯</m:mo><m:msub><m:mi>G</m:mi><m:msubsup><m:mi>p</m:mi><m:mi>K</m:mi><m:msub><m:mi>e</m:mi><m:mi>K</m:mi></m:msub></m:msubsup></m:msub></m:mrow></m:math>.
They are both listed in the appendix.</para>
      <section id="uid1">
        <title>Common Functions</title>
        <para id="id2255953">By recognizing that the convolution algorithms for different
lengths share a lot of the same computations, it is possible
to write a set of programs that take advantage of this.
The programs we have generated call functions from a relatives
small set.
Each program calls these functions with different arguments,
in differing orders, and a different number of times.
By organizing the program structure in a modular way,
we are able to generate relatively compact code
for a wide variety of lengths.</para>
        <para id="id2253530">In the appendix we have listed code for the following functions,
from which we create circular convolution algorithms.
In the next section we generate FFT programs using this same
set of functions.</para>
        <list id="id2253536" list-type="labeled-item"><item id="uid2"><label>Prime Factor Permutations</label>The Matlab function <code>pfp</code>
 implements this permutation of <link document="m18132" target-id="cid2">Prime Factor Permutations</link>.
Its transpose is implemented by <code>pfpt</code>
.
</item>
          <item id="uid3"><label>Reduction Operations</label>The Matlab function <code>KRED</code>
 implements the reduction operations of <link document="m18132" target-id="cid3">Reduction Operations</link>.
Its transpose is implemented by <code>tKRED</code>
.
Its inverse transpose is implemented by <code>itKRED</code>
 and this function
is used only for computing the multiplicative constants.
</item>
          <item id="uid4"><label>Linear Convolution Operations</label><code>ID2I</code>
 and <code>ID3I</code>
 are Matlab functions for the operations
<m:math><m:mrow><m:mi>I</m:mi><m:mo>⊗</m:mo><m:msub><m:mi>D</m:mi><m:mn>2</m:mn></m:msub><m:mo>⊗</m:mo><m:mi>I</m:mi></m:mrow></m:math> and <m:math><m:mrow><m:mi>I</m:mi><m:mo>⊗</m:mo><m:msub><m:mi>D</m:mi><m:mn>3</m:mn></m:msub><m:mo>⊗</m:mo><m:mi>I</m:mi></m:mrow></m:math>.
These linear convolution operations are also described in the appendix
`Bilinear Forms for Linear Convolution.'
<code>ID2tI</code>
 and <code>ID3tI</code>
 implement the transposes,
<m:math><m:mrow><m:mi>I</m:mi><m:mo>⊗</m:mo><m:msubsup><m:mi>D</m:mi><m:mn>2</m:mn><m:mi>t</m:mi></m:msubsup><m:mo>⊗</m:mo><m:mi>I</m:mi></m:mrow></m:math> and <m:math><m:mrow><m:mi>I</m:mi><m:mo>⊗</m:mo><m:msubsup><m:mi>D</m:mi><m:mn>3</m:mn><m:mi>t</m:mi></m:msubsup><m:mo>⊗</m:mo><m:mi>I</m:mi></m:mrow></m:math>.
</item>
        </list>
      </section>
      <section id="uid5">
        <title>Operation Counts</title>
        <para id="id2256325"><link target-id="uid6"/> lists operation counts for some of the
circular convolution algorithms we have generated.
The operation counts do not include any arithmetic operations
involved in the index variable or loops.
They include only the arithmetic operations that
involve the data sequence <m:math><m:mi>x</m:mi></m:math> in the convolution of <m:math><m:mi>x</m:mi></m:math> and <m:math><m:mi>h</m:mi></m:math>.</para>
        <para id="id2256366">The table in <link target-id="bid0"/> for the split nesting algorithm gives
very similar arithmetic operation counts.
For all lengths not divisible by 9, the algorithms we have developed
use the same number of multiplications and the same number or fewer additions.
For lengths which are divisible by 9, the algorithms described in <link target-id="bid0"/>
require fewer additions than do ours.
This is because the algorithms whose operation counts are
tabulated in the table in <link target-id="bid0"/> use
a special <m:math><m:mrow><m:msub><m:mi>Φ</m:mi><m:mn>9</m:mn></m:msub><m:mrow><m:mo>(</m:mo><m:mi>s</m:mi><m:mo>)</m:mo></m:mrow></m:mrow></m:math> convolution algorithm.
It should be noted, however, that the efficient <m:math><m:mrow><m:msub><m:mi>Φ</m:mi><m:mn>9</m:mn></m:msub><m:mrow><m:mo>(</m:mo><m:mi>s</m:mi><m:mo>)</m:mo></m:mrow></m:mrow></m:math> convolution
algorithm of <link target-id="bid0"/> is not constructed from smaller algorithms using
the Kronecker product, as is ours.
As we have discussed above, the use of the Kronecker product facilitates
adaptation to special computer architectures and
yields a very compact program with function calls
to a small set of functions.</para>
        <table id="uid6" summary="">
<tgroup cols="15"><tbody>
              <row>
                <entry>N</entry>
                <entry>muls</entry>
                <entry>adds</entry>
<entry/>
                <entry>N</entry>
                <entry>muls</entry>
                <entry>adds</entry>
<entry/>
                <entry>N</entry>
                <entry>muls</entry>
                <entry>adds</entry>
<entry/>               
 <entry>N</entry>
                <entry>muls</entry>
                <entry>adds</entry>
              </row>
              <row>
                <entry>2</entry>
                <entry>2</entry>
                <entry>4</entry>
<entry/>
                <entry>24</entry>
                <entry>56</entry>
                <entry>244</entry>
<entry/>
                <entry>80</entry>
                <entry>410</entry>
                <entry>1546</entry>
<entry/>
                <entry>240</entry>
                <entry>1640</entry>
                <entry>6508</entry>
              </row>
              <row>
                <entry>3</entry>
                <entry>4</entry>
                <entry>11</entry>
<entry/>
                <entry>27</entry>
                <entry>94</entry>
                <entry>485</entry>
<entry/>
                <entry>84</entry>
                <entry>320</entry>
                <entry>1712</entry>
<entry/>
                <entry>252</entry>
                <entry>1520</entry>
                <entry>7920</entry>
              </row>
              <row>
                <entry>4</entry>
                <entry>5</entry>
                <entry>15</entry>
<entry/>
                <entry>28</entry>
                <entry>80</entry>
                <entry>416</entry>
<entry/>
                <entry>90</entry>
                <entry>380</entry>
                <entry>1858</entry>
<entry/>
                <entry>270</entry>
                <entry>1880</entry>
                <entry>9074</entry>
              </row>
              <row>
                <entry>5</entry>
                <entry>10</entry>
                <entry>31</entry>
<entry/>
                <entry>30</entry>
                <entry>80</entry>
                <entry>386</entry>
<entry/>
                <entry>105</entry>
                <entry>640</entry>
                <entry>2881</entry>
<entry/>
                <entry>280</entry>
                <entry>2240</entry>
                <entry>9516</entry>
              </row>
              <row>
                <entry>6</entry>
                <entry>8</entry>
                <entry>34</entry>
<entry/>
                <entry>35</entry>
                <entry>160</entry>
                <entry>707</entry>
<entry/>
                <entry>108</entry>
                <entry>470</entry>
                <entry>2546</entry>
<entry/>        
        <entry>315</entry>
                <entry>3040</entry>
                <entry>13383</entry>
              </row>
              <row>
                <entry>7</entry>
                <entry>16</entry>
                <entry>71</entry>
<entry/>        
        <entry>36</entry>
                <entry>95</entry>
                <entry>493</entry>
<entry/>        
        <entry>112</entry>
                <entry>656</entry>
                <entry>2756</entry>
<entry/>        
        <entry>336</entry>
                <entry>2624</entry>
                <entry>11132</entry>
              </row>
              <row>
                <entry>8</entry>
                <entry>14</entry>
                <entry>46</entry>
<entry/>        
        <entry>40</entry>
                <entry>140</entry>
                <entry>568</entry>
<entry/>        
        <entry>120</entry>
                <entry>560</entry>
                <entry>2444</entry>
<entry/>        
        <entry>360</entry>
                <entry>2660</entry>
                <entry>11392</entry>
              </row>
              <row>
                <entry>9</entry>
                <entry>19</entry>
                <entry>82</entry>
<entry/>        
        <entry>42</entry>
                <entry>128</entry>
                <entry>718</entry>
<entry/>        
        <entry>126</entry>
                <entry>608</entry>
                <entry>3378</entry>
<entry/>        
        <entry>378</entry>
                <entry>3008</entry>
                <entry>16438</entry>
              </row>
              <row>
                <entry>10</entry>
                <entry>20</entry>
                <entry>82</entry>
<entry/>        
        <entry>45</entry>
                <entry>190</entry>
                <entry>839</entry>
<entry/>        
        <entry>135</entry>
                <entry>940</entry>
                <entry>4267</entry>
<entry/>        
        <entry>420</entry>
                <entry>3200</entry>
                <entry>14704</entry>
              </row>
              <row>
                <entry>12</entry>
                <entry>20</entry>
                <entry>92</entry>
<entry/>        
        <entry>48</entry>
                <entry>164</entry>
                <entry>656</entry>
<entry/>        
        <entry>140</entry>
                <entry>800</entry>
                <entry>3728</entry>
<entry/>        
        <entry>432</entry>
                <entry>3854</entry>
                <entry>16430</entry>
              </row>
              <row>
                <entry>14</entry>
                <entry>32</entry>
                <entry>170</entry>
<entry/>        
        <entry>54</entry>
                <entry>188</entry>
                <entry>1078</entry>
<entry/>        
        <entry>144</entry>
                <entry>779</entry>
                <entry>3277</entry>
<entry/>        
        <entry>504</entry>
                <entry>4256</entry>
                <entry>19740</entry>
              </row>
              <row>
                <entry>15</entry>
                <entry>40</entry>
                <entry>163</entry>
<entry/>        
        <entry>56</entry>
                <entry>224</entry>
                <entry>1052</entry>
<entry/>        
        <entry>168</entry>
                <entry>896</entry>
                <entry>4276</entry>
<entry/>        
        <entry>540</entry>
                <entry>4700</entry>
                <entry>21508</entry>
              </row>
              <row>
                <entry>16</entry>
                <entry>41</entry>
                <entry>135</entry>
<entry/>        
        <entry>60</entry>
                <entry>200</entry>
                <entry>952</entry>
<entry/>        
        <entry>180</entry>
                <entry>950</entry>
                <entry>4466</entry>
<entry/>        
        <entry>560</entry>
                <entry>6560</entry>
                <entry>25412</entry>
              </row>
              <row>
                <entry>18</entry>
                <entry>38</entry>
                <entry>200</entry>
<entry/>        
        <entry>63</entry>
                <entry>304</entry>
                <entry>1563</entry>
<entry/>        
        <entry>189</entry>
                <entry>1504</entry>
                <entry>7841</entry>
<entry/>        
        <entry>630</entry>
                <entry>6080</entry>
                <entry>28026</entry>
              </row>
              <row>
                <entry>20</entry>
                <entry>50</entry>
                <entry>214</entry>
<entry/>        
        <entry>70</entry>
                <entry>320</entry>
                <entry>1554</entry>
<entry/>        
        <entry>210</entry>
                <entry>1280</entry>
                <entry>6182</entry>
<entry/>        
        <entry>720</entry>
                <entry>7790</entry>
                <entry>30374</entry>
              </row>
              <row>
                <entry>21</entry>
                <entry>64</entry>
                <entry>317</entry>
<entry/>        
        <entry>72</entry>
                <entry>266</entry>
                <entry>1250</entry>
<entry/>        
        <entry>216</entry>
                <entry>1316</entry>
                <entry>6328</entry>
<entry/>        
        <entry>756</entry>
                <entry>7520</entry>
                <entry>38144</entry>
              </row>
            </tbody>
          
</tgroup>
<caption>Operation counts for split nesting circular convolution algorithms</caption>
</table>
        <para id="id2257861">It is possible to make further improvements to the operation counts
given in <link target-id="uid6"/><link target-id="bid1"/>, <link target-id="bid0"/>.
Specifically, algorithms for prime power cyclotomic convolution
based on the polynomial transform, although more complicated,
will give improvements for the longer lengths listed <link target-id="bid1"/>, <link target-id="bid0"/>.
These improvements can be easily included in the code generating
program we have developed.</para>
      </section>
    </section>
  </content>
  <bib:file>
    <bib:entry id="bid1">
      <bib:article>
<!--required fields-->
        <bib:author>Nussbaumer, H. J.</bib:author>
        <bib:title>Fast Polynomial Transform Algorithms for Digital Convolution</bib:title>
        <bib:journal>IEEE Trans. Acoust., Speech, Signal Proc.</bib:journal>
        <bib:year>1980</bib:year>
<!--optional fields-->
        <bib:volume>28</bib:volume>
        <bib:number>2</bib:number>
        <bib:pages>205-215</bib:pages>
        <bib:month>April</bib:month>
        <bib:note/>
      </bib:article>
    </bib:entry>
    <bib:entry id="bid0">
      <bib:book>
<!--required fields-->
        <bib:author>Nussbaumer, H. J.</bib:author>
        <bib:title>Fast Fourier Transform and Convolution Algorithms</bib:title>
        <bib:publisher>Sringer-Verlag</bib:publisher>
        <bib:year>1982</bib:year>
<!--optional fields-->
        <bib:volume/>
        <bib:series/>
        <bib:address/>
        <bib:edition/>
        <bib:month/>
        <bib:note/>
      </bib:book>
    </bib:entry>
  </bib:file>
</document>